--1. Display the number of states present in the LocationTable.  select count(distinct state) as No_of_states from Location;--2. How many products are of regular type?   select count(Product) as Regular_products from Product where Type='regular';--3. How much spending has been done on marketing of product ID 1? 	select sum(marketing) as Marketing_cost from fact where ProductId=1;--4. What is the minimum sales of a product?     select MIN(sales) as Min_sales from fact;--5. Display the max Cost of Good Sold (COGS).    	 select MAX(cogs) as COGS from fact;--6. Display the details of the product where product type is coffee.     select * from Product where Product_Type='coffee';--7. Display the details where total expenses are greater than 40.   select * from fact where Total_Expenses=40;--8. What is the average sales in area code 719?    select AVG(sales) as average_sales from fact where Area_Code=719;--9. Find out the total profit generated by Colorado state.       select sum(profit) as TP_colorado from fact inner join Location on fact.Area_Code=Location.Area_Code    where State=' Colorado';--10. Display the average inventory for each product ID.   select AVG(Inventory) Avg_inventory,ProductId from fact    group by ProductId   order by ProductId;--11. Display state in a sequential order in a Location Table.       select * from Location order by State;--12. Display the average budget of the Product where the average budget
--margin should be greater than 100.   select ProductId,avg(Budget_Profit) as [Budget profit]
     from [fact]
     group by ProductId
     having avg(budget_margin)>100
     order by ProductId--13. What is the total sales done on date 2010-01-01?     select sum(sales) as TS_2010_01_01 from fact where Date='2010-01-01'--14. Display the average total expense of each product ID on an individual date.   	 select Date,AVG(Total_Expenses) as AVG_TE,ProductId from fact 	 group by date,ProductId	 order by date,ProductId;--15. Display the table with the following attributes --such as date, productID, product_type, product, sales, profit, state, area_code.       select f.Date, p.ProductId,p.Product_Type,p.Product,f.Sales,f.Profit,l.State,l.Area_Code    from fact f join Location l on f.Area_Code=L.Area_Code 	join Product p on f.ProductId=P.ProductId;--16. Display the rank without any gap to show the sales wise rank. 	select date,productid,sales,profit,area_code ,DENSE_RANK() over(order by sales asc)
as sales_rank from fact;

--17. Find the state wise profit and sales.
   select L.state,sum(Profit) as profit,sum (Sales) as sales from fact f join Location L on f.Area_Code = L.Area_Code     group by State;--18. Find the state wise profit and sales along with the productname.     select L.state,sum(Profit) as profit,sum(Sales) as sales,p.Product from fact f join Location L on f.Area_Code = L.Area_Code    join Product p on p.ProductId=f.ProductId		group by State,Product;   --19. If there is an increase in sales of 5%, calculate the increasedsales.

   select sales,sales*1.05 from fact
---20. Find the maximum profit along with the product ID and producttype.

   select max(profit),p.ProductId,Product_Type from fact f join Product p on f.ProductId=p.ProductId
--21. Create a stored procedure to fetch the result according to the product type
--from Product Table.
  
  create procedure ptype (@prod_type varchar(20))
  as 
  select * from Product
  where Product_Type = @prod_type
  go

  exec ptype @prod_type = 'coffee'

--22. Write a query by creating a condition in which if the total expenses is less than
--60 then it is a profit or else loss. 

select Total_expenses,IIF(total_expenses<60,'profit','loss') as status from fact

---23. Give the total weekly sales value with the date and product ID details. Use
--roll-up to pull the data in hierarchical order.

  select DATEPART(week,date) as weeknumber,productid,sum(sales) from fact
  group by ProductId,DATEPART(week,date) with rollup;

--24. Apply union and intersection operator on the tables which consist of
--attribute area code.

select Area_Code from Location
intersect
select area_code from fact
order by Area_Code

select Area_Code from Location
union
select Area_Code from fact
order by Area_Code
---25. Create a user-defined function for the product table to fetch a particular
--product type based upon the user’s preference. 

create function producttable(@product_type varchar(50))
returns table
 as
return
select * from Product
where product_type = @Product_Type

select * from producttable('tea')
---26. Change the product type from coffee to tea where product ID is 1 and undo
--it.

Being transaction 
update Product
set Product_Type='tea'
where ProductId=1

rollback transaction
---27. Display the date, product ID and sales where total expenses are
--between 100 to 200.

select date,Profit,Sales,Total_Expenses from fact
where Total_Expenses between 100 and 200;

---28. Delete the records in the Product Table for regular type.

delete from Product
where Type='regular'

---29. Display the ASCII value of the fifth character from the columnProduct.

select Product,ascii(SUBSTRING(product,5,1)) as char from Product
